
simon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003de  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800066  00800066  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab3  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  00001007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092a  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006aaa  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a6  00000000  00000000  00008c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000291c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3c       	cpi	r26, 0xCA	; 202
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "simon.h"
uint8_t level_=1;

int main(void)
{
	setupleds();
  92:	0e 94 86 00 	call	0x10c	; 0x10c <setupleds>
	setupbuttons();
  96:	0e 94 8b 00 	call	0x116	; 0x116 <setupbuttons>
	
	
	
	srand(3);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <srand>
					DDRA=0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
			

				if(inputValue==0)
				{
					
					PORTA=0xff;
  a6:	df ef       	ldi	r29, 0xFF	; 255
		{
			level_++;
		}
		else if (gameover == 1)
		{
			level_=1;
  a8:	11 e0       	ldi	r17, 0x01	; 1
					DDRA=0xff;

	while (1)
	{

		generate_random_sequence(level_);
  aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  ae:	0e 94 94 00 	call	0x128	; 0x128 <generate_random_sequence>
		displaythesequence(level_);
  b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  b6:	0e 94 b4 00 	call	0x168	; 0x168 <displaythesequence>
		
		uint8_t gameover=0;
		for (uint8_t i=0;i<level_;i++) 
  ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  be:	88 23       	and	r24, r24
  c0:	d1 f0       	breq	.+52     	; 0xf6 <main+0x64>
  c2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t inputValue= readplayer();
  c4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readplayer>
			

				if(inputValue==0)
  c8:	81 11       	cpse	r24, r1
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x3c>
				{
					
					PORTA=0xff;
  cc:	db bb       	out	0x1b, r29	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	34 e3       	ldi	r19, 0x34	; 52
  d2:	9c e0       	ldi	r25, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4c>
  de:	00 00       	nop
				}

				_delay_ms(500);

			bool result=checksequence(i ,inputValue);
  e0:	68 2f       	mov	r22, r24
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 20 01 	call	0x240	; 0x240 <checksequence>
			
			if (result==0)
  e8:	88 23       	and	r24, r24
  ea:	59 f0       	breq	.+22     	; 0x102 <main+0x70>

		generate_random_sequence(level_);
		displaythesequence(level_);
		
		uint8_t gameover=0;
		for (uint8_t i=0;i<level_;i++) 
  ec:	cf 5f       	subi	r28, 0xFF	; 255
  ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  f2:	c8 17       	cp	r28, r24
  f4:	38 f3       	brcs	.-50     	; 0xc4 <main+0x32>
			}
			
		}
		if (gameover == 0)
		{
			level_++;
  f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <level_>
 100:	d4 cf       	rjmp	.-88     	; 0xaa <main+0x18>
		}
		else if (gameover == 1)
		{
			level_=1;
 102:	10 93 64 00 	sts	0x0064, r17	; 0x800064 <level_>
			reset ();
 106:	0e 94 29 01 	call	0x252	; 0x252 <reset>
 10a:	cf cf       	rjmp	.-98     	; 0xaa <main+0x18>

0000010c <setupleds>:
//#define maxlevels  100
uint8_t sequence[100] ={0};

void setupleds(void)
{
	setBit(DDRB,0);
 10c:	b8 9a       	sbi	0x17, 0	; 23
	setBit(DDRB,1);
 10e:	b9 9a       	sbi	0x17, 1	; 23
	setBit(DDRB,2);
 110:	ba 9a       	sbi	0x17, 2	; 23
	setBit(DDRB,3);
 112:	bb 9a       	sbi	0x17, 3	; 23
 114:	08 95       	ret

00000116 <setupbuttons>:
}


void setupbuttons(void)
{
	clearBit(DDRC,0);
 116:	a0 98       	cbi	0x14, 0	; 20
	setBit(PORTC,0);
 118:	a8 9a       	sbi	0x15, 0	; 21
	
	clearBit(DDRC,1);
 11a:	a1 98       	cbi	0x14, 1	; 20
	setBit(PORTC,1);
 11c:	a9 9a       	sbi	0x15, 1	; 21
	
	clearBit(DDRC,2);
 11e:	a2 98       	cbi	0x14, 2	; 20
	setBit(PORTC,2);
 120:	aa 9a       	sbi	0x15, 2	; 21
	
	clearBit(DDRC,3);
 122:	a3 98       	cbi	0x14, 3	; 20
	setBit(PORTC,3);
 124:	ab 9a       	sbi	0x15, 3	; 21
 126:	08 95       	ret

00000128 <generate_random_sequence>:
}


void generate_random_sequence(uint8_t level)
{
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	for(uint8_t i =0; i < level ; i++)
 130:	88 23       	and	r24, r24
 132:	a9 f0       	breq	.+42     	; 0x15e <generate_random_sequence+0x36>
 134:	c6 e6       	ldi	r28, 0x66	; 102
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	08 2f       	mov	r16, r24
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	09 59       	subi	r16, 0x99	; 153
 140:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		sequence[i] = (rand() % 4 );
 142:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <rand>
 146:	83 70       	andi	r24, 0x03	; 3
 148:	90 78       	andi	r25, 0x80	; 128
 14a:	99 23       	and	r25, r25
 14c:	24 f4       	brge	.+8      	; 0x156 <generate_random_sequence+0x2e>
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	8c 6f       	ori	r24, 0xFC	; 252
 152:	9f 6f       	ori	r25, 0xFF	; 255
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	89 93       	st	Y+, r24
}


void generate_random_sequence(uint8_t level)
{
	for(uint8_t i =0; i < level ; i++)
 158:	c0 17       	cp	r28, r16
 15a:	d1 07       	cpc	r29, r17
 15c:	91 f7       	brne	.-28     	; 0x142 <generate_random_sequence+0x1a>
	{
		sequence[i] = (rand() % 4 );
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <displaythesequence>:


void displaythesequence(uint8_t level)
{
	for(unsigned int i =0; i < level ; i++)
 168:	68 2f       	mov	r22, r24
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	61 15       	cp	r22, r1
 16e:	71 05       	cpc	r23, r1
 170:	91 f1       	breq	.+100    	; 0x1d6 <displaythesequence+0x6e>
 172:	e6 e6       	ldi	r30, 0x66	; 102
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	6a 59       	subi	r22, 0x9A	; 154
 178:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		setBit(PORTB,sequence[i]);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	df 01       	movw	r26, r30
 182:	ca 01       	movw	r24, r20
 184:	01 90       	ld	r0, Z+
 186:	02 c0       	rjmp	.+4      	; 0x18c <displaythesequence+0x24>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <displaythesequence+0x20>
 190:	82 2b       	or	r24, r18
 192:	88 bb       	out	0x18, r24	; 24
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	9c e0       	ldi	r25, 0x0C	; 12
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <displaythesequence+0x32>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <displaythesequence+0x3c>
 1a4:	00 00       	nop
		_delay_ms(500);
		clearBit(PORTB,sequence[i]);
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	9a 01       	movw	r18, r20
 1aa:	0c 90       	ld	r0, X
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <displaythesequence+0x4a>
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <displaythesequence+0x46>
 1b6:	82 2f       	mov	r24, r18
 1b8:	80 95       	com	r24
 1ba:	89 23       	and	r24, r25
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	84 e3       	ldi	r24, 0x34	; 52
 1c2:	9c e0       	ldi	r25, 0x0C	; 12
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <displaythesequence+0x5c>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <displaythesequence+0x66>
 1ce:	00 00       	nop
}


void displaythesequence(uint8_t level)
{
	for(unsigned int i =0; i < level ; i++)
 1d0:	e6 17       	cp	r30, r22
 1d2:	f7 07       	cpc	r31, r23
 1d4:	a1 f6       	brne	.-88     	; 0x17e <displaythesequence+0x16>
 1d6:	08 95       	ret

000001d8 <readplayer>:
uint8_t readplayer()
{
	uint8_t player_input=7;
	while(1)
	{
		if(readBit(PINC,0) == 0 )
 1d8:	98 99       	sbic	0x13, 0	; 19
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <readplayer+0x1a>
 1dc:	2f e7       	ldi	r18, 0x7F	; 127
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <readplayer+0xa>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <readplayer+0x14>
 1ec:	00 00       	nop
		{
			player_input=0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,1) == 0 )
 1f2:	99 99       	sbic	0x13, 1	; 19
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <readplayer+0x34>
 1f6:	2f e7       	ldi	r18, 0x7F	; 127
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <readplayer+0x24>
 204:	00 c0       	rjmp	.+0      	; 0x206 <readplayer+0x2e>
 206:	00 00       	nop
		{
			player_input=1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	08 95       	ret
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,2) == 0 )
 20c:	9a 99       	sbic	0x13, 2	; 19
 20e:	0b c0       	rjmp	.+22     	; 0x226 <readplayer+0x4e>
 210:	2f e7       	ldi	r18, 0x7F	; 127
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <readplayer+0x3e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <readplayer+0x48>
 220:	00 00       	nop
		{
			player_input=2;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	08 95       	ret
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,3) == 0 )
 226:	9b 99       	sbic	0x13, 3	; 19
 228:	d7 cf       	rjmp	.-82     	; 0x1d8 <readplayer>
 22a:	2f e7       	ldi	r18, 0x7F	; 127
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <readplayer+0x58>
 238:	00 c0       	rjmp	.+0      	; 0x23a <readplayer+0x62>
 23a:	00 00       	nop
		{
			player_input=3;
 23c:	83 e0       	ldi	r24, 0x03	; 3
			_delay_ms(50);
			break;
		}
	}
	return player_input;
}
 23e:	08 95       	ret

00000240 <checksequence>:
bool checksequence(uint8_t i ,uint8_t inputValue)
{
	//sequence // 2 0 1 1
	//user       2 0 3 1
	
	if(inputValue == sequence[i])
 240:	e8 2f       	mov	r30, r24
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ea 59       	subi	r30, 0x9A	; 154
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 81       	ld	r25, Z
 24c:	96 13       	cpse	r25, r22
 24e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 250:	08 95       	ret

00000252 <reset>:


void reset (void)
{
	setBit(PORTB,0);
 252:	c0 9a       	sbi	0x18, 0	; 24
	setBit(PORTB,1);
 254:	c1 9a       	sbi	0x18, 1	; 24
	setBit(PORTB,2);
 256:	c2 9a       	sbi	0x18, 2	; 24
	setBit(PORTB,3);
 258:	c3 9a       	sbi	0x18, 3	; 24
 25a:	08 95       	ret

0000025c <do_rand>:
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	68 81       	ld	r22, Y
 274:	79 81       	ldd	r23, Y+1	; 0x01
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	9b 81       	ldd	r25, Y+3	; 0x03
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
 27e:	81 05       	cpc	r24, r1
 280:	91 05       	cpc	r25, r1
 282:	21 f4       	brne	.+8      	; 0x28c <do_rand+0x30>
 284:	64 e2       	ldi	r22, 0x24	; 36
 286:	79 ed       	ldi	r23, 0xD9	; 217
 288:	8b e5       	ldi	r24, 0x5B	; 91
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	2d e1       	ldi	r18, 0x1D	; 29
 28e:	33 ef       	ldi	r19, 0xF3	; 243
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	0e 94 8a 01 	call	0x314	; 0x314 <__divmodsi4>
 298:	49 01       	movw	r8, r18
 29a:	5a 01       	movw	r10, r20
 29c:	9b 01       	movw	r18, r22
 29e:	ac 01       	movw	r20, r24
 2a0:	a7 ea       	ldi	r26, 0xA7	; 167
 2a2:	b1 e4       	ldi	r27, 0x41	; 65
 2a4:	0e 94 a9 01 	call	0x352	; 0x352 <__muluhisi3>
 2a8:	6b 01       	movw	r12, r22
 2aa:	7c 01       	movw	r14, r24
 2ac:	ac ee       	ldi	r26, 0xEC	; 236
 2ae:	b4 ef       	ldi	r27, 0xF4	; 244
 2b0:	a5 01       	movw	r20, r10
 2b2:	94 01       	movw	r18, r8
 2b4:	0e 94 b7 01 	call	0x36e	; 0x36e <__mulohisi3>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	8c 0d       	add	r24, r12
 2be:	9d 1d       	adc	r25, r13
 2c0:	ae 1d       	adc	r26, r14
 2c2:	bf 1d       	adc	r27, r15
 2c4:	b7 ff       	sbrs	r27, 7
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <do_rand+0x72>
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	a1 09       	sbc	r26, r1
 2cc:	b0 48       	sbci	r27, 0x80	; 128
 2ce:	88 83       	st	Y, r24
 2d0:	99 83       	std	Y+1, r25	; 0x01
 2d2:	aa 83       	std	Y+2, r26	; 0x02
 2d4:	bb 83       	std	Y+3, r27	; 0x03
 2d6:	9f 77       	andi	r25, 0x7F	; 127
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	bf 90       	pop	r11
 2e6:	af 90       	pop	r10
 2e8:	9f 90       	pop	r9
 2ea:	8f 90       	pop	r8
 2ec:	08 95       	ret

000002ee <rand_r>:
 2ee:	0e 94 2e 01 	call	0x25c	; 0x25c <do_rand>
 2f2:	08 95       	ret

000002f4 <rand>:
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 2e 01 	call	0x25c	; 0x25c <do_rand>
 2fc:	08 95       	ret

000002fe <srand>:
 2fe:	a0 e0       	ldi	r26, 0x00	; 0
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 306:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 30a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 30e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 312:	08 95       	ret

00000314 <__divmodsi4>:
 314:	05 2e       	mov	r0, r21
 316:	97 fb       	bst	r25, 7
 318:	1e f4       	brtc	.+6      	; 0x320 <__divmodsi4+0xc>
 31a:	00 94       	com	r0
 31c:	0e 94 a1 01 	call	0x342	; 0x342 <__negsi2>
 320:	57 fd       	sbrc	r21, 7
 322:	07 d0       	rcall	.+14     	; 0x332 <__divmodsi4_neg2>
 324:	0e 94 bc 01 	call	0x378	; 0x378 <__udivmodsi4>
 328:	07 fc       	sbrc	r0, 7
 32a:	03 d0       	rcall	.+6      	; 0x332 <__divmodsi4_neg2>
 32c:	4e f4       	brtc	.+18     	; 0x340 <__divmodsi4_exit>
 32e:	0c 94 a1 01 	jmp	0x342	; 0x342 <__negsi2>

00000332 <__divmodsi4_neg2>:
 332:	50 95       	com	r21
 334:	40 95       	com	r20
 336:	30 95       	com	r19
 338:	21 95       	neg	r18
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	4f 4f       	sbci	r20, 0xFF	; 255
 33e:	5f 4f       	sbci	r21, 0xFF	; 255

00000340 <__divmodsi4_exit>:
 340:	08 95       	ret

00000342 <__negsi2>:
 342:	90 95       	com	r25
 344:	80 95       	com	r24
 346:	70 95       	com	r23
 348:	61 95       	neg	r22
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f 4f       	sbci	r24, 0xFF	; 255
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	08 95       	ret

00000352 <__muluhisi3>:
 352:	0e 94 de 01 	call	0x3bc	; 0x3bc <__umulhisi3>
 356:	a5 9f       	mul	r26, r21
 358:	90 0d       	add	r25, r0
 35a:	b4 9f       	mul	r27, r20
 35c:	90 0d       	add	r25, r0
 35e:	a4 9f       	mul	r26, r20
 360:	80 0d       	add	r24, r0
 362:	91 1d       	adc	r25, r1
 364:	11 24       	eor	r1, r1
 366:	08 95       	ret

00000368 <__mulshisi3>:
 368:	b7 ff       	sbrs	r27, 7
 36a:	0c 94 a9 01 	jmp	0x352	; 0x352 <__muluhisi3>

0000036e <__mulohisi3>:
 36e:	0e 94 a9 01 	call	0x352	; 0x352 <__muluhisi3>
 372:	82 1b       	sub	r24, r18
 374:	93 0b       	sbc	r25, r19
 376:	08 95       	ret

00000378 <__udivmodsi4>:
 378:	a1 e2       	ldi	r26, 0x21	; 33
 37a:	1a 2e       	mov	r1, r26
 37c:	aa 1b       	sub	r26, r26
 37e:	bb 1b       	sub	r27, r27
 380:	fd 01       	movw	r30, r26
 382:	0d c0       	rjmp	.+26     	; 0x39e <__udivmodsi4_ep>

00000384 <__udivmodsi4_loop>:
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	ee 1f       	adc	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	a2 17       	cp	r26, r18
 38e:	b3 07       	cpc	r27, r19
 390:	e4 07       	cpc	r30, r20
 392:	f5 07       	cpc	r31, r21
 394:	20 f0       	brcs	.+8      	; 0x39e <__udivmodsi4_ep>
 396:	a2 1b       	sub	r26, r18
 398:	b3 0b       	sbc	r27, r19
 39a:	e4 0b       	sbc	r30, r20
 39c:	f5 0b       	sbc	r31, r21

0000039e <__udivmodsi4_ep>:
 39e:	66 1f       	adc	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	88 1f       	adc	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	1a 94       	dec	r1
 3a8:	69 f7       	brne	.-38     	; 0x384 <__udivmodsi4_loop>
 3aa:	60 95       	com	r22
 3ac:	70 95       	com	r23
 3ae:	80 95       	com	r24
 3b0:	90 95       	com	r25
 3b2:	9b 01       	movw	r18, r22
 3b4:	ac 01       	movw	r20, r24
 3b6:	bd 01       	movw	r22, r26
 3b8:	cf 01       	movw	r24, r30
 3ba:	08 95       	ret

000003bc <__umulhisi3>:
 3bc:	a2 9f       	mul	r26, r18
 3be:	b0 01       	movw	r22, r0
 3c0:	b3 9f       	mul	r27, r19
 3c2:	c0 01       	movw	r24, r0
 3c4:	a3 9f       	mul	r26, r19
 3c6:	70 0d       	add	r23, r0
 3c8:	81 1d       	adc	r24, r1
 3ca:	11 24       	eor	r1, r1
 3cc:	91 1d       	adc	r25, r1
 3ce:	b2 9f       	mul	r27, r18
 3d0:	70 0d       	add	r23, r0
 3d2:	81 1d       	adc	r24, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	91 1d       	adc	r25, r1
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
