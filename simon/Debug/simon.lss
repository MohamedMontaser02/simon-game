
simon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000552  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800068  00800068  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfd  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000818  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a88  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b0e  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000613  00000000  00000000  000092d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000098e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000291c  00000000  00000000  000099a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "simon.h"
uint8_t level_=1;

int main(void)
{
	setupleds();
  92:	0e 94 8a 00 	call	0x114	; 0x114 <setupleds>
	setupbuttons();
  96:	0e 94 8f 00 	call	0x11e	; 0x11e <setupbuttons>
	setup_buzzer();
  9a:	0e 94 98 00 	call	0x130	; 0x130 <setup_buzzer>
	
	
	
	srand(3);
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 39 02 	call	0x472	; 0x472 <srand>
	DDRA=0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
			

			if(inputValue==0)
			{
				
				PORTA=0xff;
  aa:	df ef       	ldi	r29, 0xFF	; 255
			level_++;
		}
		else if (gameover == 1)
		{
			failure_indicator();
			level_=1;
  ac:	11 e0       	ldi	r17, 0x01	; 1
	DDRA=0xff;

	while (1)
	{
		
		generate_random_sequence(level_);
  ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  b2:	0e 94 9a 00 	call	0x134	; 0x134 <generate_random_sequence>
		displaythesequence(level_);
  b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  ba:	0e 94 a5 01 	call	0x34a	; 0x34a <displaythesequence>
		
		uint8_t gameover=0;
		for (uint8_t i=0;i<level_;i++)
  be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  c2:	88 23       	and	r24, r24
  c4:	d1 f0       	breq	.+52     	; 0xfa <main+0x68>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t inputValue= readplayer();
  c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <readplayer>
			

			if(inputValue==0)
  cc:	81 11       	cpse	r24, r1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <main+0x40>
			{
				
				PORTA=0xff;
  d0:	db bb       	out	0x1b, r29	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	34 e3       	ldi	r19, 0x34	; 52
  d6:	9c e0       	ldi	r25, 0x0C	; 12
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x46>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x50>
  e2:	00 00       	nop
			}

			_delay_ms(500);

			bool result=checksequence(i ,inputValue);
  e4:	68 2f       	mov	r22, r24
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 ba 00 	call	0x174	; 0x174 <checksequence>
			
			if (result==0)
  ec:	88 23       	and	r24, r24
  ee:	69 f0       	breq	.+26     	; 0x10a <main+0x78>
		
		generate_random_sequence(level_);
		displaythesequence(level_);
		
		uint8_t gameover=0;
		for (uint8_t i=0;i<level_;i++)
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
  f6:	c8 17       	cp	r28, r24
  f8:	38 f3       	brcs	.-50     	; 0xc8 <main+0x36>
			}
			
		}
		if (gameover == 0)
		{
			success_indicator();
  fa:	0e 94 1d 01 	call	0x23a	; 0x23a <success_indicator>
			level_++;
  fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level_>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <level_>
 108:	d2 cf       	rjmp	.-92     	; 0xae <main+0x1c>
		}
		else if (gameover == 1)
		{
			failure_indicator();
 10a:	0e 94 65 01 	call	0x2ca	; 0x2ca <failure_indicator>
			level_=1;
 10e:	10 93 64 00 	sts	0x0064, r17	; 0x800064 <level_>
 112:	cd cf       	rjmp	.-102    	; 0xae <main+0x1c>

00000114 <setupleds>:
void reset (void)
{
	setBit(PORTB,0);
	setBit(PORTB,1);
	setBit(PORTB,2);
	setBit(PORTB,3);
 114:	b8 9a       	sbi	0x17, 0	; 23
 116:	b9 9a       	sbi	0x17, 1	; 23
 118:	ba 9a       	sbi	0x17, 2	; 23
 11a:	bb 9a       	sbi	0x17, 3	; 23
 11c:	08 95       	ret

0000011e <setupbuttons>:
 11e:	a0 98       	cbi	0x14, 0	; 20
 120:	a8 9a       	sbi	0x15, 0	; 21
 122:	a1 98       	cbi	0x14, 1	; 20
 124:	a9 9a       	sbi	0x15, 1	; 21
 126:	a2 98       	cbi	0x14, 2	; 20
 128:	aa 9a       	sbi	0x15, 2	; 21
 12a:	a3 98       	cbi	0x14, 3	; 20
 12c:	ab 9a       	sbi	0x15, 3	; 21
 12e:	08 95       	ret

00000130 <setup_buzzer>:
 130:	bc 9a       	sbi	0x17, 4	; 23
 132:	08 95       	ret

00000134 <generate_random_sequence>:
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	88 23       	and	r24, r24
 13e:	a9 f0       	breq	.+42     	; 0x16a <generate_random_sequence+0x36>
 140:	c8 e6       	ldi	r28, 0x68	; 104
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	81 50       	subi	r24, 0x01	; 1
 146:	08 2f       	mov	r16, r24
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	07 59       	subi	r16, 0x97	; 151
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	0e 94 34 02 	call	0x468	; 0x468 <rand>
 152:	83 70       	andi	r24, 0x03	; 3
 154:	90 78       	andi	r25, 0x80	; 128
 156:	99 23       	and	r25, r25
 158:	24 f4       	brge	.+8      	; 0x162 <generate_random_sequence+0x2e>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	8c 6f       	ori	r24, 0xFC	; 252
 15e:	9f 6f       	ori	r25, 0xFF	; 255
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	89 93       	st	Y+, r24
 164:	c0 17       	cp	r28, r16
 166:	d1 07       	cpc	r29, r17
 168:	91 f7       	brne	.-28     	; 0x14e <generate_random_sequence+0x1a>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <checksequence>:
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e8 59       	subi	r30, 0x98	; 152
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 81       	ld	r25, Z
 180:	96 13       	cpse	r25, r22
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret

00000186 <button_press_buzz>:
}

void button_press_buzz(uint8_t player_input)
{
	
	while(readBit(PINC,player_input)==0)
 186:	23 b3       	in	r18, 0x13	; 19
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 2e       	mov	r0, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <button_press_buzz+0xc>
 18e:	35 95       	asr	r19
 190:	27 95       	ror	r18
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <button_press_buzz+0x8>
 196:	20 fd       	sbrc	r18, 0
 198:	0e c0       	rjmp	.+28     	; 0x1b6 <button_press_buzz+0x30>
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <button_press_buzz+0x1e>
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <button_press_buzz+0x1a>
	{
		setBit(PORTB,4);
 1a8:	c4 9a       	sbi	0x18, 4	; 24
}

void button_press_buzz(uint8_t player_input)
{
	
	while(readBit(PINC,player_input)==0)
 1aa:	83 b3       	in	r24, 0x13	; 19
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	82 23       	and	r24, r18
 1b0:	93 23       	and	r25, r19
 1b2:	89 2b       	or	r24, r25
 1b4:	c9 f3       	breq	.-14     	; 0x1a8 <button_press_buzz+0x22>
	{
		setBit(PORTB,4);
	}
	 clearBit(PORTB, 4);
 1b6:	c4 98       	cbi	0x18, 4	; 24
 1b8:	08 95       	ret

000001ba <readplayer>:
uint8_t readplayer()
{
	uint8_t player_input=7;
	while(1)
	{
		if(readBit(PINC,0) == 0 )
 1ba:	98 99       	sbic	0x13, 0	; 19
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <readplayer+0x20>
		{
			player_input=0;
			button_press_buzz(player_input);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 c3 00 	call	0x186	; 0x186 <button_press_buzz>
 1c4:	2f e7       	ldi	r18, 0x7F	; 127
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <readplayer+0x10>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <readplayer+0x1a>
 1d4:	00 00       	nop
	uint8_t player_input=7;
	while(1)
	{
		if(readBit(PINC,0) == 0 )
		{
			player_input=0;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
			button_press_buzz(player_input);
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,1) == 0 )
 1da:	99 99       	sbic	0x13, 1	; 19
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <readplayer+0x40>
		{
			player_input=1;
			button_press_buzz(player_input);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 c3 00 	call	0x186	; 0x186 <button_press_buzz>
 1e4:	2f e7       	ldi	r18, 0x7F	; 127
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <readplayer+0x30>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <readplayer+0x3a>
 1f4:	00 00       	nop
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,1) == 0 )
		{
			player_input=1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
			button_press_buzz(player_input);
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,2) == 0 )
 1fa:	9a 99       	sbic	0x13, 2	; 19
 1fc:	0e c0       	rjmp	.+28     	; 0x21a <readplayer+0x60>
		{
			player_input=2;
			button_press_buzz(player_input);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 c3 00 	call	0x186	; 0x186 <button_press_buzz>
 204:	2f e7       	ldi	r18, 0x7F	; 127
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <readplayer+0x50>
 212:	00 c0       	rjmp	.+0      	; 0x214 <readplayer+0x5a>
 214:	00 00       	nop
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,2) == 0 )
		{
			player_input=2;
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	08 95       	ret
			button_press_buzz(player_input);
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,3) == 0 )
 21a:	9b 99       	sbic	0x13, 3	; 19
 21c:	ce cf       	rjmp	.-100    	; 0x1ba <readplayer>
		{
			player_input=3;
			button_press_buzz(player_input);
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 c3 00 	call	0x186	; 0x186 <button_press_buzz>
 224:	2f e7       	ldi	r18, 0x7F	; 127
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <readplayer+0x70>
 232:	00 c0       	rjmp	.+0      	; 0x234 <readplayer+0x7a>
 234:	00 00       	nop
			_delay_ms(50);
			break;
		}
		else if(readBit(PINC,3) == 0 )
		{
			player_input=3;
 236:	83 e0       	ldi	r24, 0x03	; 3
			_delay_ms(50);
			break;
		}
	}
	return player_input;
}
 238:	08 95       	ret

0000023a <success_indicator>:
 23a:	e3 e0       	ldi	r30, 0x03	; 3
	for(uint8_t i=0 ; i<3 ;i++)
	{
		
		for(uint8_t j=0 ; j<=4 ;j++)
		{   
			setBit(PORTB,j);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	34 c0       	rjmp	.+104    	; 0x2aa <success_indicator+0x70>
 242:	48 b3       	in	r20, 0x18	; 24
 244:	9b 01       	movw	r18, r22
 246:	08 2e       	mov	r0, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <success_indicator+0x14>
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <success_indicator+0x10>
 252:	24 2b       	or	r18, r20
 254:	28 bb       	out	0x18, r18	; 24
 256:	01 96       	adiw	r24, 0x01	; 1
{
	
	for(uint8_t i=0 ; i<3 ;i++)
	{
		
		for(uint8_t j=0 ; j<=4 ;j++)
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	91 05       	cpc	r25, r1
 25c:	91 f7       	brne	.-28     	; 0x242 <success_indicator+0x8>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <success_indicator+0x2a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <success_indicator+0x34>
 26e:	00 00       	nop
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_ms(100);
		
		for(uint8_t j=0 ; j<=4 ;j++)
		{
			clearBit(PORTB,j);
 274:	38 b3       	in	r19, 0x18	; 24
 276:	ab 01       	movw	r20, r22
 278:	08 2e       	mov	r0, r24
 27a:	02 c0       	rjmp	.+4      	; 0x280 <success_indicator+0x46>
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <success_indicator+0x42>
 284:	24 2f       	mov	r18, r20
 286:	20 95       	com	r18
 288:	23 23       	and	r18, r19
 28a:	28 bb       	out	0x18, r18	; 24
 28c:	01 96       	adiw	r24, 0x01	; 1
		{   
			setBit(PORTB,j);
		}
		_delay_ms(100);
		
		for(uint8_t j=0 ; j<=4 ;j++)
 28e:	85 30       	cpi	r24, 0x05	; 5
 290:	91 05       	cpc	r25, r1
 292:	81 f7       	brne	.-32     	; 0x274 <success_indicator+0x3a>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <success_indicator+0x60>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <success_indicator+0x6a>
 2a4:	00 00       	nop
 2a6:	e1 50       	subi	r30, 0x01	; 1


void success_indicator(void)
{
	
	for(uint8_t i=0 ; i<3 ;i++)
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <success_indicator+0x76>
			 
}


void success_indicator(void)
{
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	c9 cf       	rjmp	.-110    	; 0x242 <success_indicator+0x8>
			clearBit(PORTB,j);
		}
		_delay_ms(100);
	}
	
	if(blink_time>=50 )
 2b0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_time>
 2b4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <blink_time+0x1>
 2b8:	82 33       	cpi	r24, 0x32	; 50
 2ba:	91 05       	cpc	r25, r1
 2bc:	28 f0       	brcs	.+10     	; 0x2c8 <success_indicator+0x8e>
	{
		blink_time =blink_time -50 ;
 2be:	c2 97       	sbiw	r24, 0x32	; 50
 2c0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <blink_time+0x1>
 2c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blink_time>
 2c8:	08 95       	ret

000002ca <failure_indicator>:
	}
}


void failure_indicator(void)
{
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
		
		for(uint8_t j=0 ; j<=4 ;j++)
		{
			setBit(PORTB,j);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	48 b3       	in	r20, 0x18	; 24
 2d4:	9b 01       	movw	r18, r22
 2d6:	08 2e       	mov	r0, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <failure_indicator+0x14>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <failure_indicator+0x10>
 2e2:	24 2b       	or	r18, r20
 2e4:	28 bb       	out	0x18, r18	; 24
 2e6:	01 96       	adiw	r24, 0x01	; 1


void failure_indicator(void)
{
		
		for(uint8_t j=0 ; j<=4 ;j++)
 2e8:	85 30       	cpi	r24, 0x05	; 5
 2ea:	91 05       	cpc	r25, r1
 2ec:	91 f7       	brne	.-28     	; 0x2d2 <failure_indicator+0x8>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	84 e3       	ldi	r24, 0x34	; 52
 2f2:	9c e0       	ldi	r25, 0x0C	; 12
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <failure_indicator+0x2a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <failure_indicator+0x34>
 2fe:	00 00       	nop
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_ms(500);
		
		for(uint8_t j=0 ; j<=4 ;j++)
		{
			clearBit(PORTB,j);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	38 b3       	in	r19, 0x18	; 24
 30a:	ab 01       	movw	r20, r22
 30c:	08 2e       	mov	r0, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <failure_indicator+0x4a>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <failure_indicator+0x46>
 318:	24 2f       	mov	r18, r20
 31a:	20 95       	com	r18
 31c:	23 23       	and	r18, r19
 31e:	28 bb       	out	0x18, r18	; 24
 320:	01 96       	adiw	r24, 0x01	; 1
		{
			setBit(PORTB,j);
		}
		_delay_ms(500);
		
		for(uint8_t j=0 ; j<=4 ;j++)
 322:	85 30       	cpi	r24, 0x05	; 5
 324:	91 05       	cpc	r25, r1
 326:	81 f7       	brne	.-32     	; 0x308 <failure_indicator+0x3e>
		{
			clearBit(PORTB,j);
		}
}
 328:	08 95       	ret

0000032a <costum_delay>:

void costum_delay(uint16_t _time)
{
	for(uint16_t i=0 ; i<_time ; i++)
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	69 f0       	breq	.+26     	; 0x348 <costum_delay+0x1e>
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	ef ec       	ldi	r30, 0xCF	; 207
 334:	f7 e0       	ldi	r31, 0x07	; 7
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <costum_delay+0xc>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <costum_delay+0x12>
 33c:	00 00       	nop
 33e:	2f 5f       	subi	r18, 0xFF	; 255
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	82 17       	cp	r24, r18
 344:	93 07       	cpc	r25, r19
 346:	a9 f7       	brne	.-22     	; 0x332 <costum_delay+0x8>
 348:	08 95       	ret

0000034a <displaythesequence>:
	}
}


void displaythesequence(uint8_t level)
{
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29

	for(unsigned int i =0; i < level ; i++)
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	79 f1       	breq	.+94     	; 0x3be <displaythesequence+0x74>
 360:	c8 e6       	ldi	r28, 0x68	; 104
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	9c 01       	movw	r18, r24
 366:	28 59       	subi	r18, 0x98	; 152
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	79 01       	movw	r14, r18
	{
		setBit(PORTB,sequence[i]);
 36c:	01 e0       	ldi	r16, 0x01	; 1
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	28 b3       	in	r18, 0x18	; 24
 372:	6e 01       	movw	r12, r28
 374:	c8 01       	movw	r24, r16
 376:	09 90       	ld	r0, Y+
 378:	02 c0       	rjmp	.+4      	; 0x37e <displaythesequence+0x34>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <displaythesequence+0x30>
 382:	82 2b       	or	r24, r18
 384:	88 bb       	out	0x18, r24	; 24
		costum_delay(blink_time);
 386:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_time>
 38a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <blink_time+0x1>
 38e:	0e 94 95 01 	call	0x32a	; 0x32a <costum_delay>
		clearBit(PORTB,sequence[i]);
 392:	98 b3       	in	r25, 0x18	; 24
 394:	98 01       	movw	r18, r16
 396:	f6 01       	movw	r30, r12
 398:	00 80       	ld	r0, Z
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <displaythesequence+0x56>
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <displaythesequence+0x52>
 3a4:	82 2f       	mov	r24, r18
 3a6:	80 95       	com	r24
 3a8:	89 23       	and	r24, r25
 3aa:	88 bb       	out	0x18, r24	; 24
		costum_delay(blink_time);
 3ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blink_time>
 3b0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <blink_time+0x1>
 3b4:	0e 94 95 01 	call	0x32a	; 0x32a <costum_delay>


void displaythesequence(uint8_t level)
{

	for(unsigned int i =0; i < level ; i++)
 3b8:	ce 15       	cp	r28, r14
 3ba:	df 05       	cpc	r29, r15
 3bc:	c9 f6       	brne	.-78     	; 0x370 <displaythesequence+0x26>
		costum_delay(blink_time);
		clearBit(PORTB,sequence[i]);
		costum_delay(blink_time);
		
	}
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	df 90       	pop	r13
 3cc:	cf 90       	pop	r12
 3ce:	08 95       	ret

000003d0 <do_rand>:
 3d0:	8f 92       	push	r8
 3d2:	9f 92       	push	r9
 3d4:	af 92       	push	r10
 3d6:	bf 92       	push	r11
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
 3e6:	68 81       	ld	r22, Y
 3e8:	79 81       	ldd	r23, Y+1	; 0x01
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	9b 81       	ldd	r25, Y+3	; 0x03
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	81 05       	cpc	r24, r1
 3f4:	91 05       	cpc	r25, r1
 3f6:	21 f4       	brne	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	64 e2       	ldi	r22, 0x24	; 36
 3fa:	79 ed       	ldi	r23, 0xD9	; 217
 3fc:	8b e5       	ldi	r24, 0x5B	; 91
 3fe:	97 e0       	ldi	r25, 0x07	; 7
 400:	2d e1       	ldi	r18, 0x1D	; 29
 402:	33 ef       	ldi	r19, 0xF3	; 243
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	0e 94 44 02 	call	0x488	; 0x488 <__divmodsi4>
 40c:	49 01       	movw	r8, r18
 40e:	5a 01       	movw	r10, r20
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	a7 ea       	ldi	r26, 0xA7	; 167
 416:	b1 e4       	ldi	r27, 0x41	; 65
 418:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__muluhisi3>
 41c:	6b 01       	movw	r12, r22
 41e:	7c 01       	movw	r14, r24
 420:	ac ee       	ldi	r26, 0xEC	; 236
 422:	b4 ef       	ldi	r27, 0xF4	; 244
 424:	a5 01       	movw	r20, r10
 426:	94 01       	movw	r18, r8
 428:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__mulohisi3>
 42c:	dc 01       	movw	r26, r24
 42e:	cb 01       	movw	r24, r22
 430:	8c 0d       	add	r24, r12
 432:	9d 1d       	adc	r25, r13
 434:	ae 1d       	adc	r26, r14
 436:	bf 1d       	adc	r27, r15
 438:	b7 ff       	sbrs	r27, 7
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	a1 09       	sbc	r26, r1
 440:	b0 48       	sbci	r27, 0x80	; 128
 442:	88 83       	st	Y, r24
 444:	99 83       	std	Y+1, r25	; 0x01
 446:	aa 83       	std	Y+2, r26	; 0x02
 448:	bb 83       	std	Y+3, r27	; 0x03
 44a:	9f 77       	andi	r25, 0x7F	; 127
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	af 90       	pop	r10
 45c:	9f 90       	pop	r9
 45e:	8f 90       	pop	r8
 460:	08 95       	ret

00000462 <rand_r>:
 462:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <do_rand>
 466:	08 95       	ret

00000468 <rand>:
 468:	80 e6       	ldi	r24, 0x60	; 96
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <do_rand>
 470:	08 95       	ret

00000472 <srand>:
 472:	a0 e0       	ldi	r26, 0x00	; 0
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 47a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 47e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 482:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 486:	08 95       	ret

00000488 <__divmodsi4>:
 488:	05 2e       	mov	r0, r21
 48a:	97 fb       	bst	r25, 7
 48c:	1e f4       	brtc	.+6      	; 0x494 <__divmodsi4+0xc>
 48e:	00 94       	com	r0
 490:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__negsi2>
 494:	57 fd       	sbrc	r21, 7
 496:	07 d0       	rcall	.+14     	; 0x4a6 <__divmodsi4_neg2>
 498:	0e 94 76 02 	call	0x4ec	; 0x4ec <__udivmodsi4>
 49c:	07 fc       	sbrc	r0, 7
 49e:	03 d0       	rcall	.+6      	; 0x4a6 <__divmodsi4_neg2>
 4a0:	4e f4       	brtc	.+18     	; 0x4b4 <__divmodsi4_exit>
 4a2:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__negsi2>

000004a6 <__divmodsi4_neg2>:
 4a6:	50 95       	com	r21
 4a8:	40 95       	com	r20
 4aa:	30 95       	com	r19
 4ac:	21 95       	neg	r18
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	4f 4f       	sbci	r20, 0xFF	; 255
 4b2:	5f 4f       	sbci	r21, 0xFF	; 255

000004b4 <__divmodsi4_exit>:
 4b4:	08 95       	ret

000004b6 <__negsi2>:
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__muluhisi3>:
 4c6:	0e 94 98 02 	call	0x530	; 0x530 <__umulhisi3>
 4ca:	a5 9f       	mul	r26, r21
 4cc:	90 0d       	add	r25, r0
 4ce:	b4 9f       	mul	r27, r20
 4d0:	90 0d       	add	r25, r0
 4d2:	a4 9f       	mul	r26, r20
 4d4:	80 0d       	add	r24, r0
 4d6:	91 1d       	adc	r25, r1
 4d8:	11 24       	eor	r1, r1
 4da:	08 95       	ret

000004dc <__mulshisi3>:
 4dc:	b7 ff       	sbrs	r27, 7
 4de:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__muluhisi3>

000004e2 <__mulohisi3>:
 4e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__muluhisi3>
 4e6:	82 1b       	sub	r24, r18
 4e8:	93 0b       	sbc	r25, r19
 4ea:	08 95       	ret

000004ec <__udivmodsi4>:
 4ec:	a1 e2       	ldi	r26, 0x21	; 33
 4ee:	1a 2e       	mov	r1, r26
 4f0:	aa 1b       	sub	r26, r26
 4f2:	bb 1b       	sub	r27, r27
 4f4:	fd 01       	movw	r30, r26
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <__udivmodsi4_ep>

000004f8 <__udivmodsi4_loop>:
 4f8:	aa 1f       	adc	r26, r26
 4fa:	bb 1f       	adc	r27, r27
 4fc:	ee 1f       	adc	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	a2 17       	cp	r26, r18
 502:	b3 07       	cpc	r27, r19
 504:	e4 07       	cpc	r30, r20
 506:	f5 07       	cpc	r31, r21
 508:	20 f0       	brcs	.+8      	; 0x512 <__udivmodsi4_ep>
 50a:	a2 1b       	sub	r26, r18
 50c:	b3 0b       	sbc	r27, r19
 50e:	e4 0b       	sbc	r30, r20
 510:	f5 0b       	sbc	r31, r21

00000512 <__udivmodsi4_ep>:
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a 94       	dec	r1
 51c:	69 f7       	brne	.-38     	; 0x4f8 <__udivmodsi4_loop>
 51e:	60 95       	com	r22
 520:	70 95       	com	r23
 522:	80 95       	com	r24
 524:	90 95       	com	r25
 526:	9b 01       	movw	r18, r22
 528:	ac 01       	movw	r20, r24
 52a:	bd 01       	movw	r22, r26
 52c:	cf 01       	movw	r24, r30
 52e:	08 95       	ret

00000530 <__umulhisi3>:
 530:	a2 9f       	mul	r26, r18
 532:	b0 01       	movw	r22, r0
 534:	b3 9f       	mul	r27, r19
 536:	c0 01       	movw	r24, r0
 538:	a3 9f       	mul	r26, r19
 53a:	70 0d       	add	r23, r0
 53c:	81 1d       	adc	r24, r1
 53e:	11 24       	eor	r1, r1
 540:	91 1d       	adc	r25, r1
 542:	b2 9f       	mul	r27, r18
 544:	70 0d       	add	r23, r0
 546:	81 1d       	adc	r24, r1
 548:	11 24       	eor	r1, r1
 54a:	91 1d       	adc	r25, r1
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
